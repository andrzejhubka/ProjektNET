@model ProjektZaliczeniowyNET.DTOs.ServiceOrder.ServiceOrderCreateDto

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        Formularz zawiera błędy:
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

@{
    ViewData["Title"] = "Nowe zlecenie serwisowe";
}

<h2>@ViewData["Title"]</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-tools me-2"></i>Szczegóły zlecenia</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        @Html.LabelFor(m => m.VehicleId, "Pojazd", new { @class = "form-label" })
                        <div class="input-group">
                            @Html.DropDownListFor(
                                m => m.VehicleId,
                                ViewBag.Vehicles as SelectList,
                                "-- Wybierz pojazd --",
                                new { @class = "form-control" })
                            <div class="input-group-append">
                                <a href="/Vehicle/Create?returnUrl=/ServiceOrder/Create" class="btn btn-outline-secondary">
                                    <i class="fas fa-plus"></i> Dodaj pojazd
                                </a>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.VehicleId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group mb-3">
                        @Html.LabelFor(m => m.CustomerId, "Klient", new { @class = "form-label" })
                        <div class="input-group">
                            @Html.DropDownListFor(
                                m => m.CustomerId,
                                ViewBag.Customers as SelectList,
                                "-- Wybierz klienta --",
                                new { @class = "form-control" })
                            <div class="input-group-append">
                                <a href="/Customer/Create?returnUrl=/ServiceOrder/Create" class="btn btn-outline-secondary">
                                    <i class="fas fa-plus"></i> Dodaj klienta
                                </a>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.CustomerId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group mb-3">
                        @Html.LabelFor(m => m.AssignedMechanicId, "Mechanik", new { @class = "form-label" })
                        @Html.DropDownListFor(
                            m => m.AssignedMechanicId,
                            ViewBag.Mechanics as SelectList,
                            "-- Wybierz mechanika --",
                            new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.AssignedMechanicId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group mb-3">
                        <h5><i class="fas fa-wrench me-2"></i>Zadania serwisowe</h5>
                        <div id="service-tasks-container">
                        </div>
                        <button type="button" id="add-task-btn" class="btn btn-success">
                            <i class="fas fa-plus"></i> Dodaj zadanie
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-comment me-2"></i>Komentarz początkowy</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label for="commentType" class="form-label">Typ komentarza</label>
                        @Html.DropDownList("commentType", ViewBag.CommentTypes as SelectList, "-- Wybierz typ --", new { @class = "form-control" })
                    </div>

                    <div class="form-group mb-3">
                        <label for="initialComment" class="form-label">Treść komentarza</label>
                        <textarea name="initialComment" id="initialComment" class="form-control" rows="4"
                                  placeholder="Opcjonalny komentarz początkowy do zlecenia..."></textarea>
                        <small class="form-text text-muted">Możesz dodać komentarz opisujący zlecenie lub uwagi specjalne.</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-save me-2"></i>Zapisz zlecenie
        </button>
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-times me-2"></i>Anuluj
        </a>
    </div>
}

<script>
    // Przekazanie danych części z cenami do JS
    var partsData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.PartsData));
    console.log('Dane części:', partsData); // Debug
</script>

<script>
    let taskIndex = 0;
    let partIndex = 0;

    document.getElementById('add-task-btn').addEventListener('click', function() {
        addServiceTask();
    });

    function addServiceTask() {
        const container = document.getElementById('service-tasks-container');
        const taskHtml = `
        <div class="service-task-item border p-3 mb-3 rounded">
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label">Opis zadania</label>
                    <input type="text" name="ServiceTasks[${taskIndex}].Description" class="form-control" required />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Koszt robocizny (PLN)</label>
                    <input type="number" step="0.01" name="ServiceTasks[${taskIndex}].LaborCost" class="form-control" min="0" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">&nbsp;</label>
                    <button type="button" class="btn btn-danger form-control" onclick="removeTask(this)">
                        <i class="fas fa-trash"></i> Usuń
                    </button>
                </div>
            </div>
            
            <div class="mt-3">
                <h6><i class="fas fa-cog me-2"></i>Użyte części</h6>
                <div class="parts-container" data-task-index="${taskIndex}">
                </div>
                <button type="button" class="btn btn-sm btn-outline-primary" onclick="addPart(${taskIndex})">
                    <i class="fas fa-plus"></i> Dodaj część
                </button>
            </div>
        </div>
    `;
        container.insertAdjacentHTML('beforeend', taskHtml);
        taskIndex++;
    }

    function addPart(taskIdx) {
        const partsContainer = document.querySelector(`[data-task-index="${taskIdx}"]`);

        let optionsHtml = '<option value="">-- Wybierz część --</option>';

        if (partsData && partsData.length > 0) {
            partsData.forEach(part => {
                optionsHtml += `<option value="${part.Id}">${part.Name}</option>`;
            });
        }

        const partHtml = `
        <div class="part-item row mb-2 p-2 border rounded bg-light">
            <div class="col-md-4">
                <label class="form-label">Część</label>
                <select name="ServiceTasks[${taskIdx}].UsedParts[${partIndex}].Id" class="form-control part-select">
                    ${optionsHtml}
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Ilość</label>
                <input type="number" name="ServiceTasks[${taskIdx}].UsedParts[${partIndex}].Quantity" 
                       class="form-control" min="1" value="1" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Cena (PLN)</label>
                <input type="number" step="0.01" name="ServiceTasks[${taskIdx}].UsedParts[${partIndex}].Price" 
                       class="form-control part-price" min="0" readonly />
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <button type="button" class="btn btn-sm btn-danger form-control" onclick="removePart(this)">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `;
        partsContainer.insertAdjacentHTML('beforeend', partHtml);
        partIndex++;
    }

    function removeTask(button) {
        button.closest('.service-task-item').remove();
    }

    function removePart(button) {
        button.closest('.part-item').remove();
    }

    document.addEventListener('DOMContentLoaded', function() {
        addServiceTask();
    });

    // Automatyczne ustawianie ceny części po wyborze
    document.addEventListener('change', function(e) {
        if (e.target.classList.contains('part-select')) {
            const select = e.target;
            const selectedPartId = select.value;
            const container = select.closest('.part-item');
            const priceInput = container.querySelector('.part-price');

            const part = partsData.find(p => p.Id.toString() === selectedPartId);
            if (part) {
                priceInput.value = part.UnitPrice ?? part.unitPrice ?? 0;
            } else {
                priceInput.value = 0;
            }
        }
    });
</script>