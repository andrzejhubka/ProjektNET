@using ProjektZaliczeniowyNET.DTOs.ServiceOrder
@model ProjektZaliczeniowyNET.DTOs.ServiceOrder.ServiceOrderDto

@{
    ViewData["Title"] = $"Szczegóły zlecenia #{Model.Id}";
}

<h2 class="mb-4">@ViewData["Title"]</h2>

<button id="download-pdf" class="btn btn-primary mb-4">Pobierz PDF</button>

<div class="row g-4">
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-header bg-secondary text-white">
                <i class="bi bi-car-front-fill me-2"></i> Szczegóły samochodu
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <p><strong>Nazwa:</strong> @Model.Vehicle.DisplayName</p>
                        <p><strong>Numer rejestracyjny:</strong> @Model.Vehicle.LicensePlate</p>
                        <p><strong>Marka i model:</strong> @Model.Vehicle.Make @Model.Vehicle.Model</p>
                        <p><strong>Rok:</strong> @Model.Vehicle.Year</p>
                        <p><strong>Przebieg:</strong> @Model.Vehicle.Mileage km</p>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Vehicle.ImageUrl))
                    {
                        <div class="col-md-6 text-center align-self-center">
                            <img src="@Model.Vehicle.ImageUrl" alt="Zdjęcie pojazdu" class="img-thumbnail border rounded shadow-sm" style="max-height: 180px;" />
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card shadow-sm h-100">
            <div class="card-header bg-info text-white">
                <i class="bi bi-person-fill me-2"></i> Klient
            </div>
            <div class="card-body">
                <p><strong>Imię i nazwisko:</strong> @Model.Customer.FullName</p>
                <p><strong>Email:</strong> @Model.Customer.Email</p>
                <p><strong>Telefon:</strong> @Model.Customer.PhoneNumber</p>
                <p><strong>Miasto:</strong> @Model.Customer.City</p>
                @if (!string.IsNullOrWhiteSpace(Model.Customer.Address))
                {
                    <p><strong>Adres:</strong> @Model.Customer.Address</p>
                }
                @if (!string.IsNullOrWhiteSpace(Model.Customer.Notes))
                {
                    <p><strong>Notatki:</strong> @Model.Customer.Notes</p>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card shadow-sm h-100">
            <div class="card-header bg-success text-white">
                <i class="bi bi-wrench-adjustable-circle-fill me-2"></i> Mechanik
            </div>
            <div class="card-body">
                <p><strong>Imię:</strong> @Model.Mechanic.FirstName</p>
                <p><strong>Nazwisko:</strong> @Model.Mechanic.LastName</p>
                <p><strong>NrTel:</strong> @Model.Mechanic.PhoneNumber</p>
                <p><strong>Email:</strong> @Model.Mechanic.Email</p>
            </div>
        </div>
    </div>

    <div class="form-group">
        <h4>Zadania serwisowe</h4>
        <div id="service-tasks-container">
        </div>
    </div>
</div>

<script>
    // Przekazanie danych części z cenami do JS
    var partsData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.PartsData));
    var existingTasks = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ServiceTasks));
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const container = document.getElementById('service-tasks-container');
        container.innerHTML = ''; // Wyczyść, jeśli coś tam jest

        if (existingTasks && existingTasks.length > 0) {
            existingTasks.forEach((task, taskIndex) => {
                // Budujemy HTML tylko do wyświetlania
                let taskHtml = `
                <div class="service-task-item border p-3 mb-3">
                    <div class="row">
                        <div class="col-md-6">
                            <label>Opis zadania</label>
                            <input type="text" class="form-control" value="${task.Description || ''}" disabled />
                        </div>
                        <div class="col-md-4">
                            <label>Koszt robocizny (PLN)</label>
                            <input type="number" class="form-control" value="${task.LaborCost || 0}" disabled />
                        </div>
                        <div class="col-md-2">
                        </div>
                    </div>
                    <div class="mt-3">
                        <h6>Użyte części</h6>
                        <div class="parts-container">
                `;
                if (task.Parts && task.Parts.length > 0) {
                    task.Parts.forEach(part => {
                        taskHtml += `
        <div class="part-item row mb-2 p-2 border rounded">
            <div class="col-md-4">
                <label class="form-label">Część</label>
                <input type="text" class="form-control" value="${part.Name || 'Nieznana część'}" readonly />
            </div>
            <div class="col-md-3">
                <label class="form-label">Ilość</label>
                <input type="number" class="form-control" value="${part.Quantity || 1}" readonly />
            </div>
            <div class="col-md-3">
                <label class="form-label">Cena (PLN)</label>
                <input type="number" class="form-control" value="${part.UnitPrice || 0}" readonly />
            </div>
        </div>`;
                    });
                } else {
                    taskHtml += `<p class="text-muted">Brak użytych części</p>`;
                }

                taskHtml += `
                        </div>
                    </div>
                </div>
                `;

                container.insertAdjacentHTML('beforeend', taskHtml);
            });
        } else {
            container.innerHTML = '<p>Brak zadań do wyświetlenia.</p>';
        }
    });
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<script>
    // Funkcja do usuwania polskich znaków
    function removePolishChars(str) {
        if (!str) return '';
        const map = {
            'ą': 'a', 'ć': 'c', 'ę': 'e', 'ł': 'l', 'ń': 'n',
            'ó': 'o', 'ś': 's', 'ź': 'z', 'ż': 'z',
            'Ą': 'A', 'Ć': 'C', 'Ę': 'E', 'Ł': 'L', 'Ń': 'N',
            'Ó': 'O', 'Ś': 'S', 'Ź': 'Z', 'Ż': 'Z'
        };
        return str.replace(/[ąćęłńóśźżĄĆĘŁŃÓŚŹŻ]/g, c => map[c] || c);
    }

    document.getElementById('download-pdf').addEventListener('click', () => {
        const { jsPDF } = window.jspdf;
        const pdf = new jsPDF();

        const serviceOrderData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        // partsData and existingTasks are defined globally

        let y = 10;
        const lineHeight = 8;
        const pageHeight = pdf.internal.pageSize.height;

        function addLine(text, bold = false) {
            if (y + lineHeight > pageHeight - 10) {
                pdf.addPage();
                y = 10;
            }
            pdf.setFont(undefined, bold ? 'bold' : 'normal');
            pdf.text(removePolishChars(text), 10, y);
            y += lineHeight;
        }

        // Nagłówek
        addLine(`Szczegoly zlecenia #${serviceOrderData.Id}`, true);
        y += 5;

        // Samochód
        addLine('Szczegoly samochodu:', true);
        addLine(`Nazwa: ${serviceOrderData.Vehicle.DisplayName || ''}`);
        addLine(`Numer rejestracyjny: ${serviceOrderData.Vehicle.LicensePlate || ''}`);
        addLine(`Marka i model: ${serviceOrderData.Vehicle.Make || ''} ${serviceOrderData.Vehicle.Model || ''}`);
        addLine(`Rok: ${serviceOrderData.Vehicle.Year || ''}`);
        addLine(`Przebieg: ${serviceOrderData.Vehicle.Mileage || 0} km`);
        y += 5;

        // Klient
        addLine('Klient:', true);
        addLine(`Imie i nazwisko: ${serviceOrderData.Customer.FullName || ''}`);
        addLine(`Email: ${serviceOrderData.Customer.Email || ''}`);
        addLine(`Telefon: ${serviceOrderData.Customer.PhoneNumber || ''}`);
        addLine(`Miasto: ${serviceOrderData.Customer.City || ''}`);

        if (serviceOrderData.Customer.Address && serviceOrderData.Customer.Address.trim() !== '') {
            addLine(`Adres: ${serviceOrderData.Customer.Address}`);
        }
        if (serviceOrderData.Customer.Notes && serviceOrderData.Customer.Notes.trim() !== '') {
            addLine(`Notatki: ${serviceOrderData.Customer.Notes}`);
        }

        y += 5;

        // Mechanik
        addLine('Mechanik:', true);
        addLine(`Imie: ${serviceOrderData.Mechanic.FirstName || ''}`);
        addLine(`Nazwisko: ${serviceOrderData.Mechanic.LastName || ''}`);
        addLine(`NrTel: ${serviceOrderData.Mechanic.PhoneNumber || ''}`);
        addLine(`Email: ${serviceOrderData.Mechanic.Email || ''}`);

        y += 5;

        // Zadania serwisowe
        if (existingTasks && existingTasks.length > 0) {
            addLine('Zadania serwisowe:', true);
            existingTasks.forEach((task, index) => {
                y += 3;
                addLine(`Zadanie #${index + 1}:`, true);
                addLine(`Opis: ${task.Description || ''}`);
                addLine(`Koszt robocizny (PLN): ${task.LaborCost || 0}`);

                if (task.UsedParts && task.UsedParts.length > 0) {
                    addLine('Uzyte czesci:', true);
                    task.UsedParts.forEach(part => {
                        const partData = partsData.find(p => p.Id === part.Id) || {};
                        addLine(`- ${partData.Name || 'Nieznana czesc'}, Ilosc: ${part.Quantity || 1}, Cena: ${part.Price || 0} PLN`);
                    });
                } else {
                    addLine('Brak uzytych czesci');
                }
            });
        } else {
            addLine('Brak zadan do wyswietlenia.');
        }

        pdf.save(`Zlecenie_${serviceOrderData.Id}.pdf`);
    });
</script>
