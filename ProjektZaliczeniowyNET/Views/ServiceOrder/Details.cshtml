@using ProjektZaliczeniowyNET.DTOs.ServiceOrder
@model ProjektZaliczeniowyNET.DTOs.ServiceOrder.ServiceOrderDto

@{
    ViewData["Title"] = $"Szczegóły zlecenia #{Model.Id}";
}

<h2 class="mb-4">@ViewData["Title"]</h2>

<div class="mb-4">
    <button id="download-pdf" class="btn btn-primary me-2">
        <i class="fas fa-file-pdf me-2"></i>Pobierz PDF
    </button>
    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning me-2">
        <i class="fas fa-edit me-2"></i>Edytuj zlecenie
    </a>
    <a asp-action="Index" class="btn btn-secondary">
        <i class="fas fa-arrow-left me-2"></i>Powrót do listy
    </a>
</div>

<div class="row g-4">
    <!-- Status zlecenia -->
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <i class="fas fa-info-circle me-2"></i> Status zlecenia
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <p><strong>Status:</strong>
                            <span class="badge bg-@(Model.Status == ProjektZaliczeniowyNET.Models.ServiceOrderStatus.Completed ? "success" :
                                                  Model.Status == ProjektZaliczeniowyNET.Models.ServiceOrderStatus.InProgress ? "warning" :
                                                  Model.Status == ProjektZaliczeniowyNET.Models.ServiceOrderStatus.Cancelled ? "danger" : "secondary")">
                                @Model.Status
                            </span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Szczegóły samochodu -->
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-header bg-secondary text-white">
                <i class="fas fa-car me-2"></i> Szczegóły samochodu
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <p><strong>Nazwa:</strong> @Model.Vehicle.DisplayName</p>
                        <p><strong>Numer rejestracyjny:</strong> @Model.Vehicle.LicensePlate</p>
                        <p><strong>Marka i model:</strong> @Model.Vehicle.Make @Model.Vehicle.Model</p>
                        <p><strong>Rok:</strong> @Model.Vehicle.Year</p>
                        <p><strong>Przebieg:</strong> @Model.Vehicle.Mileage km</p>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Vehicle.ImageUrl))
                    {
                        <div class="col-md-6 text-center align-self-center">
                            <img src="@Model.Vehicle.ImageUrl" alt="Zdjęcie pojazdu" class="img-thumbnail border rounded shadow-sm" style="max-height: 180px;" />
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Klient i Mechanik -->
    <div class="col-md-6">
        <div class="card shadow-sm h-100">
            <div class="card-header bg-info text-white">
                <i class="fas fa-user me-2"></i> Klient
            </div>
            <div class="card-body">
                <p><strong>Imię i nazwisko:</strong> @Model.Customer.FullName</p>
                <p><strong>Email:</strong> @Model.Customer.Email</p>
                <p><strong>Telefon:</strong> @Model.Customer.PhoneNumber</p>
                <p><strong>Miasto:</strong> @Model.Customer.City</p>
                @if (!string.IsNullOrWhiteSpace(Model.Customer.Address))
                {
                    <p><strong>Adres:</strong> @Model.Customer.Address</p>
                }
                @if (!string.IsNullOrWhiteSpace(Model.Customer.Notes))
                {
                    <p><strong>Notatki:</strong> @Model.Customer.Notes</p>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card shadow-sm h-100">
            <div class="card-header bg-success text-white">
                <i class="fas fa-wrench me-2"></i> Mechanik
            </div>
            <div class="card-body">
                <p><strong>Imię:</strong> @Model.Mechanic.FirstName</p>
                <p><strong>Nazwisko:</strong> @Model.Mechanic.LastName</p>
                <p><strong>Telefon:</strong> @Model.Mechanic.PhoneNumber</p>
                <p><strong>Email:</strong> @Model.Mechanic.Email</p>
            </div>
        </div>
    </div>

    <!-- Zadania serwisowe -->
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-header bg-warning text-dark">
                <i class="fas fa-tasks me-2"></i> Zadania serwisowe
            </div>
            <div class="card-body">
                <div id="service-tasks-container">
                    <!-- Zadania będą załadowane przez JavaScript -->
                </div>
            </div>
        </div>
    </div>

    <!-- Sekcja komentarzy -->
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-header bg-dark text-white">
                <i class="fas fa-comments me-2"></i> Komentarze
            </div>
            <div class="card-body">
                <!-- Istniejące komentarze -->
                @if (ViewBag.Comments != null && ((IEnumerable<dynamic>)ViewBag.Comments).Any())
                {
                    <div class="mb-4">
                        <h6>Historia komentarzy:</h6>
                        @foreach (var comment in (IEnumerable<dynamic>)ViewBag.Comments)
                        {
                            <div class="card mb-2">
                                <div class="card-body p-3">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <strong>@comment.AuthorName</strong>
                                            <span class="badge bg-secondary ms-2">@comment.Type</span>
                                        </div>
                                        <small class="text-muted">@comment.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                                    </div>
                                    <p class="mt-2 mb-0">@comment.Content</p>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted mb-4">Brak komentarzy do tego zlecenia.</p>
                }

                <!-- Formularz dodawania komentarza -->
                <div class="border-top pt-4">
                    <h6>Dodaj komentarz:</h6>
                    @using (Html.BeginForm("AddComment", "ServiceOrder", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("serviceOrderId", Model.Id)

                        <div class="row g-3">
                            <div class="col-md-4">
                                <label for="type" class="form-label">Typ komentarza</label>
                                @Html.DropDownList("type", ViewBag.CommentTypes as SelectList, "-- Wybierz typ --", new { @class = "form-control", required = true })
                            </div>
                            <div class="col-md-8">
                                <label for="content" class="form-label">Treść komentarza</label>
                                <textarea name="content" id="content" class="form-control" rows="3" required
                                          placeholder="Wpisz swój komentarz..."></textarea>
                            </div>
                            <div class="col-12">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-plus me-2"></i>Dodaj komentarz
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Przekazanie danych z serwera do JavaScript
    var serviceOrderData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    var existingTasks = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ServiceTasks));

    console.log('Service Order Data:', serviceOrderData);
    console.log('Existing Tasks:', existingTasks);
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const container = document.getElementById('service-tasks-container');

        if (!container) {
            console.error('Container service-tasks-container not found');
            return;
        }

        container.innerHTML = ''; // Wyczyść kontener

        if (existingTasks && existingTasks.length > 0) {
            let totalLaborCost = 0;
            let totalPartsCost = 0;

            existingTasks.forEach((task, taskIndex) => {
                console.log(`Rendering task ${taskIndex}:`, task);

                // Oblicz koszt części dla tego zadania
                let taskPartsCost = 0;
                if (task.Parts && task.Parts.length > 0) {
                    taskPartsCost = task.Parts.reduce((sum, part) => {
                        return sum + ((part.UnitPrice || 0) * (part.Quantity || 1));
                    }, 0);
                }

                totalLaborCost += (task.LaborCost || 0);
                totalPartsCost += taskPartsCost;

                // Buduj HTML dla zadania
                let taskHtml = `
                    <div class="service-task-item border rounded p-3 mb-3 bg-light">
                        <div class="row mb-3">
                            <div class="col-md-8">
                                <h6 class="text-primary">
                                    <i class="fas fa-cog me-2"></i>Zadanie #${taskIndex + 1}
                                </h6>
                                <p class="mb-1"><strong>Opis:</strong> ${task.Description || 'Brak opisu'}</p>
                            </div>
                            <div class="col-md-4 text-end">
                                <p class="mb-1"><strong>Koszt robocizny:</strong></p>
                                <span class="badge bg-success fs-6">${(task.LaborCost || 0).toFixed(2)} PLN</span>
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <h6 class="text-secondary">
                                <i class="fas fa-puzzle-piece me-2"></i>Użyte części:
                            </h6>
                `;

                if (task.Parts && task.Parts.length > 0) {
                    taskHtml += `<div class="table-responsive">
                        <table class="table table-sm table-striped">
                            <thead class="table-dark">
                                <tr>
                                    <th>Nazwa części</th>
                                    <th>Ilość</th>
                                    <th>Cena jednostkowa</th>
                                    <th>Wartość</th>
                                </tr>
                            </thead>
                            <tbody>`;

                    task.Parts.forEach(part => {
                        const quantity = part.Quantity || 1;
                        const unitPrice = part.UnitPrice || 0;
                        const totalPrice = quantity * unitPrice;

                        taskHtml += `
                            <tr>
                                <td>${part.Name || 'Nieznana część'}</td>
                                <td>${quantity}</td>
                                <td>${unitPrice.toFixed(2)} PLN</td>
                                <td><strong>${totalPrice.toFixed(2)} PLN</strong></td>
                            </tr>`;
                    });

                    taskHtml += `</tbody>
                        </table>
                        <div class="text-end">
                            <strong>Koszt części dla tego zadania: ${taskPartsCost.toFixed(2)} PLN</strong>
                        </div>
                    </div>`;
                } else {
                    taskHtml += `<p class="text-muted fst-italic">Brak użytych części w tym zadaniu</p>`;
                }

                taskHtml += `</div></div>`;
                container.insertAdjacentHTML('beforeend', taskHtml);
            });

            // Dodaj podsumowanie kosztów
            const summaryHtml = `
                <div class="card bg-info text-white mt-4">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-calculator me-2"></i>Podsumowanie kosztów
                        </h5>
                        <div class="row">
                            <div class="col-md-4">
                                <p class="mb-1">Koszt robocizny:</p>
                                <h6>${totalLaborCost.toFixed(2)} PLN</h6>
                            </div>
                            <div class="col-md-4">
                                <p class="mb-1">Koszt części:</p>
                                <h6>${totalPartsCost.toFixed(2)} PLN</h6>
                            </div>
                            <div class="col-md-4">
                                <p class="mb-1">Koszt całkowity:</p>
                                <h5><strong>${(totalLaborCost + totalPartsCost).toFixed(2)} PLN</strong></h5>
                            </div>
                        </div>
                    </div>
                </div>`;

            container.insertAdjacentHTML('beforeend', summaryHtml);

        } else {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-exclamation-circle fa-3x text-muted mb-3"></i>
                    <p class="text-muted">Brak zadań serwisowych do wyświetlenia.</p>
                </div>`;
        }
    });
</script>

<!-- PDF Generation Script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<script>
    // Funkcja do usuwania polskich znaków
    function removePolishChars(str) {
        if (!str) return '';
        const map = {
            'ą': 'a', 'ć': 'c', 'ę': 'e', 'ł': 'l', 'ń': 'n',
            'ó': 'o', 'ś': 's', 'ź': 'z', 'ż': 'z',
            'Ą': 'A', 'Ć': 'C', 'Ę': 'E', 'Ł': 'L', 'Ń': 'N',
            'Ó': 'O', 'Ś': 'S', 'Ź': 'Z', 'Ż': 'Z'
        };
        return str.replace(/[ąćęłńóśźżĄĆĘŁŃÓŚŹŻ]/g, c => map[c] || c);
    }

    document.getElementById('download-pdf').addEventListener('click', () => {
        const { jsPDF } = window.jspdf;
        const pdf = new jsPDF();

        let y = 10;
        const lineHeight = 8;
        const pageHeight = pdf.internal.pageSize.height;

        function addLine(text, bold = false) {
            if (y + lineHeight > pageHeight - 10) {
                pdf.addPage();
                y = 10;
            }
            pdf.setFont(undefined, bold ? 'bold' : 'normal');
            pdf.text(removePolishChars(text), 10, y);
            y += lineHeight;
        }

        // Nagłówek
        addLine(`Szczegoly zlecenia #${serviceOrderData.Id}`, true);
        addLine(`Status: ${serviceOrderData.Status}`);
        addLine(`Data utworzenia: ${new Date(serviceOrderData.CreatedAt).toLocaleDateString('pl-PL')}`);
        if (serviceOrderData.CompletedAt) {
            addLine(`Data ukonczenia: ${new Date(serviceOrderData.CompletedAt).toLocaleDateString('pl-PL')}`);
        }
        y += 5;

        // Samochód
        addLine('Szczegoly samochodu:', true);
        addLine(`Nazwa: ${serviceOrderData.Vehicle.DisplayName || ''}`);
        addLine(`Numer rejestracyjny: ${serviceOrderData.Vehicle.LicensePlate || ''}`);
        addLine(`Marka i model: ${serviceOrderData.Vehicle.Make || ''} ${serviceOrderData.Vehicle.Model || ''}`);
        addLine(`Rok: ${serviceOrderData.Vehicle.Year || ''}`);
        addLine(`Przebieg: ${serviceOrderData.Vehicle.Mileage || 0} km`);
        y += 5;

        // Klient
        addLine('Klient:', true);
        addLine(`Imie i nazwisko: ${serviceOrderData.Customer.FullName || ''}`);
        addLine(`Email: ${serviceOrderData.Customer.Email || ''}`);
        addLine(`Telefon: ${serviceOrderData.Customer.PhoneNumber || ''}`);
        addLine(`Miasto: ${serviceOrderData.Customer.City || ''}`);

        if (serviceOrderData.Customer.Address && serviceOrderData.Customer.Address.trim() !== '') {
            addLine(`Adres: ${serviceOrderData.Customer.Address}`);
        }
        if (serviceOrderData.Customer.Notes && serviceOrderData.Customer.Notes.trim() !== '') {
            addLine(`Notatki: ${serviceOrderData.Customer.Notes}`);
        }
        y += 5;

        // Mechanik
        addLine('Mechanik:', true);
        addLine(`Imie: ${serviceOrderData.Mechanic.FirstName || ''}`);
        addLine(`Nazwisko: ${serviceOrderData.Mechanic.LastName || ''}`);
        addLine(`NrTel: ${serviceOrderData.Mechanic.PhoneNumber || ''}`);
        addLine(`Email: ${serviceOrderData.Mechanic.Email || ''}`);
        y += 5;

        // Zadania serwisowe
        if (existingTasks && existingTasks.length > 0) {
            addLine('Zadania serwisowe:', true);
            let totalLaborCost = 0;
            let totalPartsCost = 0;

            existingTasks.forEach((task, index) => {
                y += 3;
                addLine(`Zadanie #${index + 1}:`, true);
                addLine(`Opis: ${task.Description || ''}`);
                addLine(`Koszt robocizny (PLN): ${task.LaborCost || 0}`);

                totalLaborCost += (task.LaborCost || 0);

                if (task.Parts && task.Parts.length > 0) {
                    addLine('Uzyte czesci:', true);
                    let taskPartsCost = 0;
                    task.Parts.forEach(part => {
                        const quantity = part.Quantity || 1;
                        const unitPrice = part.UnitPrice || 0;
                        const partTotalCost = quantity * unitPrice;
                        taskPartsCost += partTotalCost;

                        addLine(`- ${part.Name || 'Nieznana czesc'}, Ilosc: ${quantity}, Cena jedn.: ${unitPrice} PLN, Razem: ${partTotalCost.toFixed(2)} PLN`);
                    });
                    addLine(`Suma czesci dla zadania: ${taskPartsCost.toFixed(2)} PLN`);
                    totalPartsCost += taskPartsCost;
                } else {
                    addLine('Brak uzytych czesci');
                }
            });

            y += 5;
            addLine('PODSUMOWANIE KOSZTOW:', true);
            addLine(`Koszt robocizny: ${totalLaborCost.toFixed(2)} PLN`);
            addLine(`Koszt czesci: ${totalPartsCost.toFixed(2)} PLN`);
            addLine(`KOSZT CALKOWITY: ${(totalLaborCost + totalPartsCost).toFixed(2)} PLN`, true);

        } else {
            addLine('Brak zadan do wyswietlenia.');
        }

        pdf.save(`Zlecenie_${serviceOrderData.Id}.pdf`);
    });
</script>