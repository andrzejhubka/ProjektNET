@model ProjektZaliczeniowyNET.DTOs.ServiceOrder.ServiceOrderUpdateDto

@{
ViewData["Title"] = "Edycja zlecenia serwisowego";
}

<h2>Edycja zlecenia serwisowego</h2>

@using (Html.BeginForm())
{
@Html.AntiForgeryToken()


<div class="form-group mb-3">
    @Html.LabelFor(m => m.VehicleId, "Pojazd", new { @class = "form-label" })
    @Html.DropDownListFor(m => m.VehicleId, ViewBag.Vehicles as SelectList, "-- Wybierz pojazd --", new { @class = "form-control" })
    @Html.ValidationMessageFor(m => m.VehicleId, "", new { @class = "text-danger" })
</div>

<div class="form-group mb-3">
    @Html.LabelFor(m => m.CustomerId, "Klient", new { @class = "form-label" })
    @Html.DropDownListFor(m => m.CustomerId, ViewBag.Customers as SelectList, "-- Wybierz klienta --", new { @class = "form-control" })
    @Html.ValidationMessageFor(m => m.CustomerId, "", new { @class = "text-danger" })
</div>

<div class="form-group mb-3">
    @Html.LabelFor(m => m.AssignedMechanicId, "Przypisany mechanik", new { @class = "form-label" })
    @Html.DropDownListFor(m => m.AssignedMechanicId, ViewBag.Mechanics as SelectList, "-- Wybierz mechanika --", new { @class = "form-control" })
    @Html.ValidationMessageFor(m => m.AssignedMechanicId, "", new { @class = "text-danger" })
</div>

<div class="form-group mb-3">
    <label class="form-label">Zadania serwisowe</label>
    <div id="service-tasks-container"></div>
    <button type="button" class="btn btn-secondary" onclick="addServiceTask()">Dodaj zadanie</button>
</div>

<div class="form-group">
    <button type="submit" class="btn btn-primary">Zapisz zmiany</button>
    <a asp-action="Index" class="btn btn-secondary">Anuluj</a>
</div>
}

<script>
    let taskIndex = 0;
    let partIndex = 0;

    // Dane części z serwera
    var partsData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Parts));

    // Istniejące zadania
    var existingTasks = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ServiceTasks));

    console.log('Existing tasks:', existingTasks);

    function addServiceTask(existingTask = null, existingTaskIndex = null) {
        const container = document.getElementById('service-tasks-container');
        const currentIndex = existingTaskIndex !== null ? existingTaskIndex : taskIndex;

        const taskHtml = `
        <div class="service-task-item border p-3 mb-3">
            ${existingTask ? `<input type="hidden" name="ServiceTasks[${currentIndex}].Id" value="${existingTask.Id}" />` : ''}
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label">Opis zadania</label>
                    <input type="text" name="ServiceTasks[${currentIndex}].Description" 
                           class="form-control" required 
                           value="${existingTask ? existingTask.Description : ''}" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Koszt robocizny (PLN)</label>
                    <input type="number" step="0.01" name="ServiceTasks[${currentIndex}].LaborCost" 
                           class="form-control" min="0" 
                           value="${existingTask ? existingTask.LaborCost : 0}" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">&nbsp;</label>
                    <button type="button" class="btn btn-danger form-control" onclick="removeServiceTask(this)">Usuń zadanie</button>
                </div>
            </div>
            
            <div class="mt-3">
                <h6>Użyte części</h6>
                <div class="parts-container" data-task-index="${currentIndex}">
                </div>
                <button type="button" class="btn btn-sm btn-outline-primary" onclick="addPart(${currentIndex})">Dodaj część</button>
            </div>
        </div>
        `;

        container.insertAdjacentHTML('beforeend', taskHtml);

        // Załaduj części dla tego zadania
        if (existingTask && existingTask.Parts) {
            existingTask.Parts.forEach((part, partIdx) => {
                addPart(currentIndex, part, partIdx);
            });
        }

        if (existingTaskIndex === null) {
            taskIndex++;
        }
    }

    function addPart(taskIdx, existingPart = null, existingPartIndex = null) {
        const partsContainer = document.querySelector(`[data-task-index="${taskIdx}"]`);
        const currentPartIndex = existingPartIndex !== null ? existingPartIndex : partIndex;

        let optionsHtml = '<option value="">-- Wybierz część --</option>';

        if (partsData && partsData.length > 0) {
            partsData.forEach(part => {
                const selected = existingPart && existingPart.Id === part.Id ? 'selected' : '';
                optionsHtml += `<option value="${part.Id}" ${selected}>${part.Name}</option>`;
            });
        }

        const partHtml = `
        <div class="part-item row mb-2 p-2 border rounded">
            <div class="col-md-4">
                <label class="form-label">Część</label>
                <select name="ServiceTasks[${taskIdx}].Parts[${currentPartIndex}].Id" class="form-control part-select">
                    ${optionsHtml}
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Ilość</label>
                <input type="number" name="ServiceTasks[${taskIdx}].Parts[${currentPartIndex}].Quantity" 
                       class="form-control" min="1" 
                       value="${existingPart ? (existingPart.Quantity || 1) : 1}" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Cena (PLN)</label>
                <input type="number" step="0.01" name="ServiceTasks[${taskIdx}].Parts[${currentPartIndex}].Price" 
                       class="form-control part-price" min="0" 
                       value="${existingPart ? (existingPart.UnitPrice || existingPart.Price || 0) : 0}" readonly />
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <button type="button" class="btn btn-sm btn-danger form-control" onclick="removePart(this)">Usuń</button>
            </div>
        </div>
        `;

        partsContainer.insertAdjacentHTML('beforeend', partHtml);

        if (existingPartIndex === null) {
            partIndex++;
        }

        // Dodaj event listener dla zmiany ceny
        const lastPartSelect = partsContainer.querySelector('.part-item:last-child .part-select');
        if (lastPartSelect) {
            lastPartSelect.addEventListener('change', function() {
                updatePartPrice(this);
            });
        }
    }

    function removeServiceTask(button) {
        button.closest('.service-task-item').remove();
    }

    function removePart(button) {
        button.closest('.part-item').remove();
    }

    function updatePartPrice(selectElement) {
        const selectedPartId = selectElement.value;
        const priceInput = selectElement.closest('.part-item').querySelector('.part-price');

        if (selectedPartId && partsData) {
            const selectedPart = partsData.find(p => p.Id == selectedPartId);
            if (selectedPart) {
                priceInput.value = selectedPart.UnitPrice || 0;
            }
        } else {
            priceInput.value = 0;
        }
    }

    // Załaduj istniejące zadania przy ładowaniu strony
    document.addEventListener('DOMContentLoaded', function() {
        if (existingTasks && existingTasks.length > 0) {
            existingTasks.forEach((task, index) => {
                addServiceTask(task, index);
            });
            taskIndex = existingTasks.length;
        }
    });
</script>
